// <auto-generated />
using System;
using EasieR.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EasieR.DataAccess.Migrations
{
    [DbContext(typeof(EasieRContext))]
    [Migration("20220702115253_reservation type seat tables table")]
    partial class reservationtypeseattablestable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EasieR.Domain.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ADMIN",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PUBLIC",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PLACE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PUBLIC_UNAUTORIZED",
                            isActive = false,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("EasieR.Domain.ActorRoles", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ActorRoles");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 4
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 5
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 5
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 6
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 7
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 8
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 8
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 8
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 9
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 9
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 10
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 10
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 11
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 11
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 12
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 12
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 13
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 13
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 13
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 14
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 14
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 15
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 15
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 16
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 16
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 17
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 17
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 17
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 17
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 18
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 18
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 18
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 18
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 19
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 19
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 20
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 20
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 21
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 21
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 22
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 22
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 22
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 22
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 23
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 23
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 23
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 23
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 24
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 24
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 25
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 25
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 26
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 26
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 26
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 26
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 27
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 27
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 27
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 27
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 28
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 28
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 28
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 29
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 29
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 29
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 29
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 30
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 30
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 30
                        },
                        new
                        {
                            ActorId = 4,
                            RoleId = 30
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 31
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 32
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 32
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 32
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 34
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 34
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 34
                        },
                        new
                        {
                            ActorId = 1,
                            RoleId = 33
                        },
                        new
                        {
                            ActorId = 2,
                            RoleId = 33
                        },
                        new
                        {
                            ActorId = 3,
                            RoleId = 33
                        });
                });

            modelBuilder.Entity("EasieR.Domain.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommandAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommandId")
                        .HasColumnType("int");

                    b.Property<string>("CommandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequestSuccess")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("EasieR.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EasieR.Domain.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EasieR.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetAndNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("EasieR.Domain.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EndWorkingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StartWorkingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("EasieR.Domain.PlaceStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlaceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("PlaceStaff");
                });

            modelBuilder.Entity("EasieR.Domain.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOn")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NumberOfGuests")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("ReservationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReservationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("EasieR.Domain.ReservationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfGuests")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("ReservationType");
                });

            modelBuilder.Entity("EasieR.Domain.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CREATE_USER",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_ONE_USER",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SEARCH_USER",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UPDATE_USER",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DELETE_USER",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CREATE_ROLE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_ONE_ROLE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SEARCH_ROLE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UPDATE_ROLE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DELETE_ROLE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CREATE_LOCATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_ONE_LOCATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SEARCH_LOCATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UPDATE_LOCATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DELETE_LOCATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CREATE_PLACE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_ONE_PLACE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SEARCH_PLACE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UPDATE_PLACE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DELETE_PLACE",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CREATE_EVENT",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_ONE_EVENT",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SEARCH_EVENT",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UPDATE_EVENT",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DELETE_EVENT",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CREATE_RESERVATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_ONE_RESERVATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SEARCH_RESERVATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UPDATE_RESERVATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DELETE_RESERVATION",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_AUDIT_LOGS",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_PLACE_STAFF",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_SEAT_TABLES",
                            isActive = false,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GET_IMAGES",
                            isActive = false,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("EasieR.Domain.SeatTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ReservationTypeId");

                    b.ToTable("SeatTable");
                });

            modelBuilder.Entity("EasieR.Domain.SeatTableReservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatTableId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId", "SeatTableId");

                    b.HasIndex("SeatTableId");

                    b.ToTable("SeatTableReservation");
                });

            modelBuilder.Entity("EasieR.Domain.SeatTableReservationType", b =>
                {
                    b.Property<int>("ReservationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SeatTableId")
                        .HasColumnType("int");

                    b.HasKey("ReservationTypeId", "SeatTableId");

                    b.HasIndex("SeatTableId");

                    b.ToTable("SeatTableReservationType");
                });

            modelBuilder.Entity("EasieR.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActorId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@root",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "admin123",
                            UserName = "admin",
                            isActive = false,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("EasieR.Domain.ActorRoles", b =>
                {
                    b.HasOne("EasieR.Domain.Actor", "Actor")
                        .WithMany("ActorRoles")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasieR.Domain.Roles", "Roles")
                        .WithMany("ActorRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("EasieR.Domain.Event", b =>
                {
                    b.HasOne("EasieR.Domain.Place", "Place")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("EasieR.Domain.Images", b =>
                {
                    b.HasOne("EasieR.Domain.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasieR.Domain.Place", "Place")
                        .WithMany("Images")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Event");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("EasieR.Domain.Place", b =>
                {
                    b.HasOne("EasieR.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EasieR.Domain.PlaceStaff", b =>
                {
                    b.HasOne("EasieR.Domain.Place", "Place")
                        .WithMany("Staff")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasieR.Domain.User", "User")
                        .WithMany("PlaceStaffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasieR.Domain.Reservation", b =>
                {
                    b.HasOne("EasieR.Domain.ReservationType", "ReservationType")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasieR.Domain.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReservationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasieR.Domain.ReservationType", b =>
                {
                    b.HasOne("EasieR.Domain.Event", "Event")
                        .WithMany("ReservationTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EasieR.Domain.SeatTable", b =>
                {
                    b.HasOne("EasieR.Domain.Place", "Place")
                        .WithMany("SeatTables")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasieR.Domain.ReservationType", "ReservationType")
                        .WithMany()
                        .HasForeignKey("ReservationTypeId");

                    b.Navigation("Place");

                    b.Navigation("ReservationType");
                });

            modelBuilder.Entity("EasieR.Domain.SeatTableReservation", b =>
                {
                    b.HasOne("EasieR.Domain.Reservation", "Reservation")
                        .WithMany("SeatTableReservation")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasieR.Domain.SeatTable", "SeatTable")
                        .WithMany("SeatTableReservation")
                        .HasForeignKey("SeatTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("SeatTable");
                });

            modelBuilder.Entity("EasieR.Domain.SeatTableReservationType", b =>
                {
                    b.HasOne("EasieR.Domain.ReservationType", "ReservationType")
                        .WithMany("AvailableSeatTables")
                        .HasForeignKey("ReservationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasieR.Domain.SeatTable", "SeatTable")
                        .WithMany("SeatTableReservationTypes")
                        .HasForeignKey("SeatTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReservationType");

                    b.Navigation("SeatTable");
                });

            modelBuilder.Entity("EasieR.Domain.User", b =>
                {
                    b.HasOne("EasieR.Domain.Actor", "Actor")
                        .WithMany("Users")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("EasieR.Domain.Actor", b =>
                {
                    b.Navigation("ActorRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EasieR.Domain.Event", b =>
                {
                    b.Navigation("EventImages");

                    b.Navigation("ReservationTypes");
                });

            modelBuilder.Entity("EasieR.Domain.Place", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Images");

                    b.Navigation("SeatTables");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("EasieR.Domain.Reservation", b =>
                {
                    b.Navigation("SeatTableReservation");
                });

            modelBuilder.Entity("EasieR.Domain.ReservationType", b =>
                {
                    b.Navigation("AvailableSeatTables");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EasieR.Domain.Roles", b =>
                {
                    b.Navigation("ActorRoles");
                });

            modelBuilder.Entity("EasieR.Domain.SeatTable", b =>
                {
                    b.Navigation("SeatTableReservation");

                    b.Navigation("SeatTableReservationTypes");
                });

            modelBuilder.Entity("EasieR.Domain.User", b =>
                {
                    b.Navigation("PlaceStaffs");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
